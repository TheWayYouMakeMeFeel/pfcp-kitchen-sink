// Code generated by "enumer -type=MessageType -yaml"; DO NOT EDIT.

//
package pfcp

import (
	"fmt"
)

const (
	_MessageTypeName_0 = "HeartbeatRequestHeartbeatResponse"
	_MessageTypeName_1 = "AssociationSetupRequestAssociationSetupResponse"
	_MessageTypeName_2 = "SessionEtablismentRequestSessionEtablismentResponse"
)

var (
	_MessageTypeIndex_0 = [...]uint8{0, 16, 33}
	_MessageTypeIndex_1 = [...]uint8{0, 23, 47}
	_MessageTypeIndex_2 = [...]uint8{0, 25, 51}
)

func (i MessageType) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _MessageTypeName_0[_MessageTypeIndex_0[i]:_MessageTypeIndex_0[i+1]]
	case 5 <= i && i <= 6:
		i -= 5
		return _MessageTypeName_1[_MessageTypeIndex_1[i]:_MessageTypeIndex_1[i+1]]
	case 50 <= i && i <= 51:
		i -= 50
		return _MessageTypeName_2[_MessageTypeIndex_2[i]:_MessageTypeIndex_2[i+1]]
	default:
		return fmt.Sprintf("MessageType(%d)", i)
	}
}

var _MessageTypeValues = []MessageType{1, 2, 5, 6, 50, 51}

var _MessageTypeNameToValueMap = map[string]MessageType{
	_MessageTypeName_0[0:16]:  1,
	_MessageTypeName_0[16:33]: 2,
	_MessageTypeName_1[0:23]:  5,
	_MessageTypeName_1[23:47]: 6,
	_MessageTypeName_2[0:25]:  50,
	_MessageTypeName_2[25:51]: 51,
}

// MessageTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MessageTypeString(s string) (MessageType, error) {
	if val, ok := _MessageTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MessageType values", s)
}

// MessageTypeValues returns all values of the enum
func MessageTypeValues() []MessageType {
	return _MessageTypeValues
}

// IsAMessageType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MessageType) IsAMessageType() bool {
	for _, v := range _MessageTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for MessageType
func (i MessageType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for MessageType
func (i *MessageType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = MessageTypeString(s)
	return err
}
