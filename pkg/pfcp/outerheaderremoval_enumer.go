// Code generated by "enumer -type=OuterHeaderRemoval -yaml"; DO NOT EDIT.

//
package pfcp

import (
	"fmt"
)

const _OuterHeaderRemovalName = "OUTER_HEADER_GTPU_UDP_IPV4OUTER_HEADER_GTPU_UDP_IPV6OUTER_HEADER_UDP_IPV4OUTER_HEADER_UDP_IPV46"

var _OuterHeaderRemovalIndex = [...]uint8{0, 26, 52, 73, 95}

func (i OuterHeaderRemoval) String() string {
	if i >= OuterHeaderRemoval(len(_OuterHeaderRemovalIndex)-1) {
		return fmt.Sprintf("OuterHeaderRemoval(%d)", i)
	}
	return _OuterHeaderRemovalName[_OuterHeaderRemovalIndex[i]:_OuterHeaderRemovalIndex[i+1]]
}

var _OuterHeaderRemovalValues = []OuterHeaderRemoval{0, 1, 2, 3}

var _OuterHeaderRemovalNameToValueMap = map[string]OuterHeaderRemoval{
	_OuterHeaderRemovalName[0:26]:  0,
	_OuterHeaderRemovalName[26:52]: 1,
	_OuterHeaderRemovalName[52:73]: 2,
	_OuterHeaderRemovalName[73:95]: 3,
}

// OuterHeaderRemovalString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OuterHeaderRemovalString(s string) (OuterHeaderRemoval, error) {
	if val, ok := _OuterHeaderRemovalNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OuterHeaderRemoval values", s)
}

// OuterHeaderRemovalValues returns all values of the enum
func OuterHeaderRemovalValues() []OuterHeaderRemoval {
	return _OuterHeaderRemovalValues
}

// IsAOuterHeaderRemoval returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OuterHeaderRemoval) IsAOuterHeaderRemoval() bool {
	for _, v := range _OuterHeaderRemovalValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for OuterHeaderRemoval
func (i OuterHeaderRemoval) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for OuterHeaderRemoval
func (i *OuterHeaderRemoval) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = OuterHeaderRemovalString(s)
	return err
}
