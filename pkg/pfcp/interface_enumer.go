// Code generated by "enumer -type=Interface -yaml"; DO NOT EDIT.

//
package pfcp

import (
	"fmt"
)

const _InterfaceName = "AccessCoreSGiLANCPFuntionLIFunction"

var _InterfaceIndex = [...]uint8{0, 6, 10, 16, 25, 35}

func (i Interface) String() string {
	if i >= Interface(len(_InterfaceIndex)-1) {
		return fmt.Sprintf("Interface(%d)", i)
	}
	return _InterfaceName[_InterfaceIndex[i]:_InterfaceIndex[i+1]]
}

var _InterfaceValues = []Interface{0, 1, 2, 3, 4}

var _InterfaceNameToValueMap = map[string]Interface{
	_InterfaceName[0:6]:   0,
	_InterfaceName[6:10]:  1,
	_InterfaceName[10:16]: 2,
	_InterfaceName[16:25]: 3,
	_InterfaceName[25:35]: 4,
}

// InterfaceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InterfaceString(s string) (Interface, error) {
	if val, ok := _InterfaceNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Interface values", s)
}

// InterfaceValues returns all values of the enum
func InterfaceValues() []Interface {
	return _InterfaceValues
}

// IsAInterface returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Interface) IsAInterface() bool {
	for _, v := range _InterfaceValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for Interface
func (i Interface) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Interface
func (i *Interface) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = InterfaceString(s)
	return err
}
